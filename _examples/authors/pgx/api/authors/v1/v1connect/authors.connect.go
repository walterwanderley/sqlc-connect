// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: authors/v1/authors.proto

package v1connect

import (
	v1 "authors/api/authors/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthorsServiceName is the fully-qualified name of the AuthorsService service.
	AuthorsServiceName = "authors.v1.AuthorsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthorsServiceCreateAuthorProcedure is the fully-qualified name of the AuthorsService's
	// CreateAuthor RPC.
	AuthorsServiceCreateAuthorProcedure = "/authors.v1.AuthorsService/CreateAuthor"
	// AuthorsServiceDeleteAuthorProcedure is the fully-qualified name of the AuthorsService's
	// DeleteAuthor RPC.
	AuthorsServiceDeleteAuthorProcedure = "/authors.v1.AuthorsService/DeleteAuthor"
	// AuthorsServiceGetAuthorProcedure is the fully-qualified name of the AuthorsService's GetAuthor
	// RPC.
	AuthorsServiceGetAuthorProcedure = "/authors.v1.AuthorsService/GetAuthor"
	// AuthorsServiceListAuthorsProcedure is the fully-qualified name of the AuthorsService's
	// ListAuthors RPC.
	AuthorsServiceListAuthorsProcedure = "/authors.v1.AuthorsService/ListAuthors"
)

// AuthorsServiceClient is a client for the authors.v1.AuthorsService service.
type AuthorsServiceClient interface {
	CreateAuthor(context.Context, *connect.Request[v1.CreateAuthorRequest]) (*connect.Response[v1.CreateAuthorResponse], error)
	DeleteAuthor(context.Context, *connect.Request[v1.DeleteAuthorRequest]) (*connect.Response[v1.DeleteAuthorResponse], error)
	GetAuthor(context.Context, *connect.Request[v1.GetAuthorRequest]) (*connect.Response[v1.GetAuthorResponse], error)
	ListAuthors(context.Context, *connect.Request[v1.ListAuthorsRequest]) (*connect.Response[v1.ListAuthorsResponse], error)
}

// NewAuthorsServiceClient constructs a client for the authors.v1.AuthorsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthorsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthorsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authorsServiceMethods := v1.File_authors_v1_authors_proto.Services().ByName("AuthorsService").Methods()
	return &authorsServiceClient{
		createAuthor: connect.NewClient[v1.CreateAuthorRequest, v1.CreateAuthorResponse](
			httpClient,
			baseURL+AuthorsServiceCreateAuthorProcedure,
			connect.WithSchema(authorsServiceMethods.ByName("CreateAuthor")),
			connect.WithClientOptions(opts...),
		),
		deleteAuthor: connect.NewClient[v1.DeleteAuthorRequest, v1.DeleteAuthorResponse](
			httpClient,
			baseURL+AuthorsServiceDeleteAuthorProcedure,
			connect.WithSchema(authorsServiceMethods.ByName("DeleteAuthor")),
			connect.WithClientOptions(opts...),
		),
		getAuthor: connect.NewClient[v1.GetAuthorRequest, v1.GetAuthorResponse](
			httpClient,
			baseURL+AuthorsServiceGetAuthorProcedure,
			connect.WithSchema(authorsServiceMethods.ByName("GetAuthor")),
			connect.WithClientOptions(opts...),
		),
		listAuthors: connect.NewClient[v1.ListAuthorsRequest, v1.ListAuthorsResponse](
			httpClient,
			baseURL+AuthorsServiceListAuthorsProcedure,
			connect.WithSchema(authorsServiceMethods.ByName("ListAuthors")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authorsServiceClient implements AuthorsServiceClient.
type authorsServiceClient struct {
	createAuthor *connect.Client[v1.CreateAuthorRequest, v1.CreateAuthorResponse]
	deleteAuthor *connect.Client[v1.DeleteAuthorRequest, v1.DeleteAuthorResponse]
	getAuthor    *connect.Client[v1.GetAuthorRequest, v1.GetAuthorResponse]
	listAuthors  *connect.Client[v1.ListAuthorsRequest, v1.ListAuthorsResponse]
}

// CreateAuthor calls authors.v1.AuthorsService.CreateAuthor.
func (c *authorsServiceClient) CreateAuthor(ctx context.Context, req *connect.Request[v1.CreateAuthorRequest]) (*connect.Response[v1.CreateAuthorResponse], error) {
	return c.createAuthor.CallUnary(ctx, req)
}

// DeleteAuthor calls authors.v1.AuthorsService.DeleteAuthor.
func (c *authorsServiceClient) DeleteAuthor(ctx context.Context, req *connect.Request[v1.DeleteAuthorRequest]) (*connect.Response[v1.DeleteAuthorResponse], error) {
	return c.deleteAuthor.CallUnary(ctx, req)
}

// GetAuthor calls authors.v1.AuthorsService.GetAuthor.
func (c *authorsServiceClient) GetAuthor(ctx context.Context, req *connect.Request[v1.GetAuthorRequest]) (*connect.Response[v1.GetAuthorResponse], error) {
	return c.getAuthor.CallUnary(ctx, req)
}

// ListAuthors calls authors.v1.AuthorsService.ListAuthors.
func (c *authorsServiceClient) ListAuthors(ctx context.Context, req *connect.Request[v1.ListAuthorsRequest]) (*connect.Response[v1.ListAuthorsResponse], error) {
	return c.listAuthors.CallUnary(ctx, req)
}

// AuthorsServiceHandler is an implementation of the authors.v1.AuthorsService service.
type AuthorsServiceHandler interface {
	CreateAuthor(context.Context, *connect.Request[v1.CreateAuthorRequest]) (*connect.Response[v1.CreateAuthorResponse], error)
	DeleteAuthor(context.Context, *connect.Request[v1.DeleteAuthorRequest]) (*connect.Response[v1.DeleteAuthorResponse], error)
	GetAuthor(context.Context, *connect.Request[v1.GetAuthorRequest]) (*connect.Response[v1.GetAuthorResponse], error)
	ListAuthors(context.Context, *connect.Request[v1.ListAuthorsRequest]) (*connect.Response[v1.ListAuthorsResponse], error)
}

// NewAuthorsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthorsServiceHandler(svc AuthorsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authorsServiceMethods := v1.File_authors_v1_authors_proto.Services().ByName("AuthorsService").Methods()
	authorsServiceCreateAuthorHandler := connect.NewUnaryHandler(
		AuthorsServiceCreateAuthorProcedure,
		svc.CreateAuthor,
		connect.WithSchema(authorsServiceMethods.ByName("CreateAuthor")),
		connect.WithHandlerOptions(opts...),
	)
	authorsServiceDeleteAuthorHandler := connect.NewUnaryHandler(
		AuthorsServiceDeleteAuthorProcedure,
		svc.DeleteAuthor,
		connect.WithSchema(authorsServiceMethods.ByName("DeleteAuthor")),
		connect.WithHandlerOptions(opts...),
	)
	authorsServiceGetAuthorHandler := connect.NewUnaryHandler(
		AuthorsServiceGetAuthorProcedure,
		svc.GetAuthor,
		connect.WithSchema(authorsServiceMethods.ByName("GetAuthor")),
		connect.WithHandlerOptions(opts...),
	)
	authorsServiceListAuthorsHandler := connect.NewUnaryHandler(
		AuthorsServiceListAuthorsProcedure,
		svc.ListAuthors,
		connect.WithSchema(authorsServiceMethods.ByName("ListAuthors")),
		connect.WithHandlerOptions(opts...),
	)
	return "/authors.v1.AuthorsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthorsServiceCreateAuthorProcedure:
			authorsServiceCreateAuthorHandler.ServeHTTP(w, r)
		case AuthorsServiceDeleteAuthorProcedure:
			authorsServiceDeleteAuthorHandler.ServeHTTP(w, r)
		case AuthorsServiceGetAuthorProcedure:
			authorsServiceGetAuthorHandler.ServeHTTP(w, r)
		case AuthorsServiceListAuthorsProcedure:
			authorsServiceListAuthorsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthorsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthorsServiceHandler struct{}

func (UnimplementedAuthorsServiceHandler) CreateAuthor(context.Context, *connect.Request[v1.CreateAuthorRequest]) (*connect.Response[v1.CreateAuthorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authors.v1.AuthorsService.CreateAuthor is not implemented"))
}

func (UnimplementedAuthorsServiceHandler) DeleteAuthor(context.Context, *connect.Request[v1.DeleteAuthorRequest]) (*connect.Response[v1.DeleteAuthorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authors.v1.AuthorsService.DeleteAuthor is not implemented"))
}

func (UnimplementedAuthorsServiceHandler) GetAuthor(context.Context, *connect.Request[v1.GetAuthorRequest]) (*connect.Response[v1.GetAuthorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authors.v1.AuthorsService.GetAuthor is not implemented"))
}

func (UnimplementedAuthorsServiceHandler) ListAuthors(context.Context, *connect.Request[v1.ListAuthorsRequest]) (*connect.Response[v1.ListAuthorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authors.v1.AuthorsService.ListAuthors is not implemented"))
}
