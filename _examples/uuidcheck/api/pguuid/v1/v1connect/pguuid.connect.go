// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pguuid/v1/pguuid.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "uuidcheck/api/pguuid/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PguuidServiceName is the fully-qualified name of the PguuidService service.
	PguuidServiceName = "pguuid.v1.PguuidService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PguuidServiceCreateLocationTransactionsProcedure is the fully-qualified name of the
	// PguuidService's CreateLocationTransactions RPC.
	PguuidServiceCreateLocationTransactionsProcedure = "/pguuid.v1.PguuidService/CreateLocationTransactions"
	// PguuidServiceCreateProductProcedure is the fully-qualified name of the PguuidService's
	// CreateProduct RPC.
	PguuidServiceCreateProductProcedure = "/pguuid.v1.PguuidService/CreateProduct"
	// PguuidServiceCreateProductReturnAllProcedure is the fully-qualified name of the PguuidService's
	// CreateProductReturnAll RPC.
	PguuidServiceCreateProductReturnAllProcedure = "/pguuid.v1.PguuidService/CreateProductReturnAll"
	// PguuidServiceCreateProductReturnPartialProcedure is the fully-qualified name of the
	// PguuidService's CreateProductReturnPartial RPC.
	PguuidServiceCreateProductReturnPartialProcedure = "/pguuid.v1.PguuidService/CreateProductReturnPartial"
	// PguuidServiceCreateUserProcedure is the fully-qualified name of the PguuidService's CreateUser
	// RPC.
	PguuidServiceCreateUserProcedure = "/pguuid.v1.PguuidService/CreateUser"
	// PguuidServiceCreateUserReturnAllProcedure is the fully-qualified name of the PguuidService's
	// CreateUserReturnAll RPC.
	PguuidServiceCreateUserReturnAllProcedure = "/pguuid.v1.PguuidService/CreateUserReturnAll"
	// PguuidServiceCreateUserReturnPartialProcedure is the fully-qualified name of the PguuidService's
	// CreateUserReturnPartial RPC.
	PguuidServiceCreateUserReturnPartialProcedure = "/pguuid.v1.PguuidService/CreateUserReturnPartial"
	// PguuidServiceGetProductsByIdsProcedure is the fully-qualified name of the PguuidService's
	// GetProductsByIds RPC.
	PguuidServiceGetProductsByIdsProcedure = "/pguuid.v1.PguuidService/GetProductsByIds"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	pguuidServiceServiceDescriptor                          = v1.File_pguuid_v1_pguuid_proto.Services().ByName("PguuidService")
	pguuidServiceCreateLocationTransactionsMethodDescriptor = pguuidServiceServiceDescriptor.Methods().ByName("CreateLocationTransactions")
	pguuidServiceCreateProductMethodDescriptor              = pguuidServiceServiceDescriptor.Methods().ByName("CreateProduct")
	pguuidServiceCreateProductReturnAllMethodDescriptor     = pguuidServiceServiceDescriptor.Methods().ByName("CreateProductReturnAll")
	pguuidServiceCreateProductReturnPartialMethodDescriptor = pguuidServiceServiceDescriptor.Methods().ByName("CreateProductReturnPartial")
	pguuidServiceCreateUserMethodDescriptor                 = pguuidServiceServiceDescriptor.Methods().ByName("CreateUser")
	pguuidServiceCreateUserReturnAllMethodDescriptor        = pguuidServiceServiceDescriptor.Methods().ByName("CreateUserReturnAll")
	pguuidServiceCreateUserReturnPartialMethodDescriptor    = pguuidServiceServiceDescriptor.Methods().ByName("CreateUserReturnPartial")
	pguuidServiceGetProductsByIdsMethodDescriptor           = pguuidServiceServiceDescriptor.Methods().ByName("GetProductsByIds")
)

// PguuidServiceClient is a client for the pguuid.v1.PguuidService service.
type PguuidServiceClient interface {
	CreateLocationTransactions(context.Context, *connect.Request[v1.CreateLocationTransactionsRequest]) (*connect.Response[v1.CreateLocationTransactionsResponse], error)
	CreateProduct(context.Context, *connect.Request[v1.CreateProductRequest]) (*connect.Response[v1.CreateProductResponse], error)
	CreateProductReturnAll(context.Context, *connect.Request[v1.CreateProductReturnAllRequest]) (*connect.Response[v1.CreateProductReturnAllResponse], error)
	CreateProductReturnPartial(context.Context, *connect.Request[v1.CreateProductReturnPartialRequest]) (*connect.Response[v1.CreateProductReturnPartialResponse], error)
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	CreateUserReturnAll(context.Context, *connect.Request[v1.CreateUserReturnAllRequest]) (*connect.Response[v1.CreateUserReturnAllResponse], error)
	CreateUserReturnPartial(context.Context, *connect.Request[v1.CreateUserReturnPartialRequest]) (*connect.Response[v1.CreateUserReturnPartialResponse], error)
	GetProductsByIds(context.Context, *connect.Request[v1.GetProductsByIdsRequest]) (*connect.Response[v1.GetProductsByIdsResponse], error)
}

// NewPguuidServiceClient constructs a client for the pguuid.v1.PguuidService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPguuidServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PguuidServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pguuidServiceClient{
		createLocationTransactions: connect.NewClient[v1.CreateLocationTransactionsRequest, v1.CreateLocationTransactionsResponse](
			httpClient,
			baseURL+PguuidServiceCreateLocationTransactionsProcedure,
			connect.WithSchema(pguuidServiceCreateLocationTransactionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createProduct: connect.NewClient[v1.CreateProductRequest, v1.CreateProductResponse](
			httpClient,
			baseURL+PguuidServiceCreateProductProcedure,
			connect.WithSchema(pguuidServiceCreateProductMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createProductReturnAll: connect.NewClient[v1.CreateProductReturnAllRequest, v1.CreateProductReturnAllResponse](
			httpClient,
			baseURL+PguuidServiceCreateProductReturnAllProcedure,
			connect.WithSchema(pguuidServiceCreateProductReturnAllMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createProductReturnPartial: connect.NewClient[v1.CreateProductReturnPartialRequest, v1.CreateProductReturnPartialResponse](
			httpClient,
			baseURL+PguuidServiceCreateProductReturnPartialProcedure,
			connect.WithSchema(pguuidServiceCreateProductReturnPartialMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createUser: connect.NewClient[v1.CreateUserRequest, v1.CreateUserResponse](
			httpClient,
			baseURL+PguuidServiceCreateUserProcedure,
			connect.WithSchema(pguuidServiceCreateUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createUserReturnAll: connect.NewClient[v1.CreateUserReturnAllRequest, v1.CreateUserReturnAllResponse](
			httpClient,
			baseURL+PguuidServiceCreateUserReturnAllProcedure,
			connect.WithSchema(pguuidServiceCreateUserReturnAllMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createUserReturnPartial: connect.NewClient[v1.CreateUserReturnPartialRequest, v1.CreateUserReturnPartialResponse](
			httpClient,
			baseURL+PguuidServiceCreateUserReturnPartialProcedure,
			connect.WithSchema(pguuidServiceCreateUserReturnPartialMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProductsByIds: connect.NewClient[v1.GetProductsByIdsRequest, v1.GetProductsByIdsResponse](
			httpClient,
			baseURL+PguuidServiceGetProductsByIdsProcedure,
			connect.WithSchema(pguuidServiceGetProductsByIdsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// pguuidServiceClient implements PguuidServiceClient.
type pguuidServiceClient struct {
	createLocationTransactions *connect.Client[v1.CreateLocationTransactionsRequest, v1.CreateLocationTransactionsResponse]
	createProduct              *connect.Client[v1.CreateProductRequest, v1.CreateProductResponse]
	createProductReturnAll     *connect.Client[v1.CreateProductReturnAllRequest, v1.CreateProductReturnAllResponse]
	createProductReturnPartial *connect.Client[v1.CreateProductReturnPartialRequest, v1.CreateProductReturnPartialResponse]
	createUser                 *connect.Client[v1.CreateUserRequest, v1.CreateUserResponse]
	createUserReturnAll        *connect.Client[v1.CreateUserReturnAllRequest, v1.CreateUserReturnAllResponse]
	createUserReturnPartial    *connect.Client[v1.CreateUserReturnPartialRequest, v1.CreateUserReturnPartialResponse]
	getProductsByIds           *connect.Client[v1.GetProductsByIdsRequest, v1.GetProductsByIdsResponse]
}

// CreateLocationTransactions calls pguuid.v1.PguuidService.CreateLocationTransactions.
func (c *pguuidServiceClient) CreateLocationTransactions(ctx context.Context, req *connect.Request[v1.CreateLocationTransactionsRequest]) (*connect.Response[v1.CreateLocationTransactionsResponse], error) {
	return c.createLocationTransactions.CallUnary(ctx, req)
}

// CreateProduct calls pguuid.v1.PguuidService.CreateProduct.
func (c *pguuidServiceClient) CreateProduct(ctx context.Context, req *connect.Request[v1.CreateProductRequest]) (*connect.Response[v1.CreateProductResponse], error) {
	return c.createProduct.CallUnary(ctx, req)
}

// CreateProductReturnAll calls pguuid.v1.PguuidService.CreateProductReturnAll.
func (c *pguuidServiceClient) CreateProductReturnAll(ctx context.Context, req *connect.Request[v1.CreateProductReturnAllRequest]) (*connect.Response[v1.CreateProductReturnAllResponse], error) {
	return c.createProductReturnAll.CallUnary(ctx, req)
}

// CreateProductReturnPartial calls pguuid.v1.PguuidService.CreateProductReturnPartial.
func (c *pguuidServiceClient) CreateProductReturnPartial(ctx context.Context, req *connect.Request[v1.CreateProductReturnPartialRequest]) (*connect.Response[v1.CreateProductReturnPartialResponse], error) {
	return c.createProductReturnPartial.CallUnary(ctx, req)
}

// CreateUser calls pguuid.v1.PguuidService.CreateUser.
func (c *pguuidServiceClient) CreateUser(ctx context.Context, req *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// CreateUserReturnAll calls pguuid.v1.PguuidService.CreateUserReturnAll.
func (c *pguuidServiceClient) CreateUserReturnAll(ctx context.Context, req *connect.Request[v1.CreateUserReturnAllRequest]) (*connect.Response[v1.CreateUserReturnAllResponse], error) {
	return c.createUserReturnAll.CallUnary(ctx, req)
}

// CreateUserReturnPartial calls pguuid.v1.PguuidService.CreateUserReturnPartial.
func (c *pguuidServiceClient) CreateUserReturnPartial(ctx context.Context, req *connect.Request[v1.CreateUserReturnPartialRequest]) (*connect.Response[v1.CreateUserReturnPartialResponse], error) {
	return c.createUserReturnPartial.CallUnary(ctx, req)
}

// GetProductsByIds calls pguuid.v1.PguuidService.GetProductsByIds.
func (c *pguuidServiceClient) GetProductsByIds(ctx context.Context, req *connect.Request[v1.GetProductsByIdsRequest]) (*connect.Response[v1.GetProductsByIdsResponse], error) {
	return c.getProductsByIds.CallUnary(ctx, req)
}

// PguuidServiceHandler is an implementation of the pguuid.v1.PguuidService service.
type PguuidServiceHandler interface {
	CreateLocationTransactions(context.Context, *connect.Request[v1.CreateLocationTransactionsRequest]) (*connect.Response[v1.CreateLocationTransactionsResponse], error)
	CreateProduct(context.Context, *connect.Request[v1.CreateProductRequest]) (*connect.Response[v1.CreateProductResponse], error)
	CreateProductReturnAll(context.Context, *connect.Request[v1.CreateProductReturnAllRequest]) (*connect.Response[v1.CreateProductReturnAllResponse], error)
	CreateProductReturnPartial(context.Context, *connect.Request[v1.CreateProductReturnPartialRequest]) (*connect.Response[v1.CreateProductReturnPartialResponse], error)
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	CreateUserReturnAll(context.Context, *connect.Request[v1.CreateUserReturnAllRequest]) (*connect.Response[v1.CreateUserReturnAllResponse], error)
	CreateUserReturnPartial(context.Context, *connect.Request[v1.CreateUserReturnPartialRequest]) (*connect.Response[v1.CreateUserReturnPartialResponse], error)
	GetProductsByIds(context.Context, *connect.Request[v1.GetProductsByIdsRequest]) (*connect.Response[v1.GetProductsByIdsResponse], error)
}

// NewPguuidServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPguuidServiceHandler(svc PguuidServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	pguuidServiceCreateLocationTransactionsHandler := connect.NewUnaryHandler(
		PguuidServiceCreateLocationTransactionsProcedure,
		svc.CreateLocationTransactions,
		connect.WithSchema(pguuidServiceCreateLocationTransactionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pguuidServiceCreateProductHandler := connect.NewUnaryHandler(
		PguuidServiceCreateProductProcedure,
		svc.CreateProduct,
		connect.WithSchema(pguuidServiceCreateProductMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pguuidServiceCreateProductReturnAllHandler := connect.NewUnaryHandler(
		PguuidServiceCreateProductReturnAllProcedure,
		svc.CreateProductReturnAll,
		connect.WithSchema(pguuidServiceCreateProductReturnAllMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pguuidServiceCreateProductReturnPartialHandler := connect.NewUnaryHandler(
		PguuidServiceCreateProductReturnPartialProcedure,
		svc.CreateProductReturnPartial,
		connect.WithSchema(pguuidServiceCreateProductReturnPartialMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pguuidServiceCreateUserHandler := connect.NewUnaryHandler(
		PguuidServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(pguuidServiceCreateUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pguuidServiceCreateUserReturnAllHandler := connect.NewUnaryHandler(
		PguuidServiceCreateUserReturnAllProcedure,
		svc.CreateUserReturnAll,
		connect.WithSchema(pguuidServiceCreateUserReturnAllMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pguuidServiceCreateUserReturnPartialHandler := connect.NewUnaryHandler(
		PguuidServiceCreateUserReturnPartialProcedure,
		svc.CreateUserReturnPartial,
		connect.WithSchema(pguuidServiceCreateUserReturnPartialMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pguuidServiceGetProductsByIdsHandler := connect.NewUnaryHandler(
		PguuidServiceGetProductsByIdsProcedure,
		svc.GetProductsByIds,
		connect.WithSchema(pguuidServiceGetProductsByIdsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/pguuid.v1.PguuidService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PguuidServiceCreateLocationTransactionsProcedure:
			pguuidServiceCreateLocationTransactionsHandler.ServeHTTP(w, r)
		case PguuidServiceCreateProductProcedure:
			pguuidServiceCreateProductHandler.ServeHTTP(w, r)
		case PguuidServiceCreateProductReturnAllProcedure:
			pguuidServiceCreateProductReturnAllHandler.ServeHTTP(w, r)
		case PguuidServiceCreateProductReturnPartialProcedure:
			pguuidServiceCreateProductReturnPartialHandler.ServeHTTP(w, r)
		case PguuidServiceCreateUserProcedure:
			pguuidServiceCreateUserHandler.ServeHTTP(w, r)
		case PguuidServiceCreateUserReturnAllProcedure:
			pguuidServiceCreateUserReturnAllHandler.ServeHTTP(w, r)
		case PguuidServiceCreateUserReturnPartialProcedure:
			pguuidServiceCreateUserReturnPartialHandler.ServeHTTP(w, r)
		case PguuidServiceGetProductsByIdsProcedure:
			pguuidServiceGetProductsByIdsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPguuidServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPguuidServiceHandler struct{}

func (UnimplementedPguuidServiceHandler) CreateLocationTransactions(context.Context, *connect.Request[v1.CreateLocationTransactionsRequest]) (*connect.Response[v1.CreateLocationTransactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pguuid.v1.PguuidService.CreateLocationTransactions is not implemented"))
}

func (UnimplementedPguuidServiceHandler) CreateProduct(context.Context, *connect.Request[v1.CreateProductRequest]) (*connect.Response[v1.CreateProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pguuid.v1.PguuidService.CreateProduct is not implemented"))
}

func (UnimplementedPguuidServiceHandler) CreateProductReturnAll(context.Context, *connect.Request[v1.CreateProductReturnAllRequest]) (*connect.Response[v1.CreateProductReturnAllResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pguuid.v1.PguuidService.CreateProductReturnAll is not implemented"))
}

func (UnimplementedPguuidServiceHandler) CreateProductReturnPartial(context.Context, *connect.Request[v1.CreateProductReturnPartialRequest]) (*connect.Response[v1.CreateProductReturnPartialResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pguuid.v1.PguuidService.CreateProductReturnPartial is not implemented"))
}

func (UnimplementedPguuidServiceHandler) CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pguuid.v1.PguuidService.CreateUser is not implemented"))
}

func (UnimplementedPguuidServiceHandler) CreateUserReturnAll(context.Context, *connect.Request[v1.CreateUserReturnAllRequest]) (*connect.Response[v1.CreateUserReturnAllResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pguuid.v1.PguuidService.CreateUserReturnAll is not implemented"))
}

func (UnimplementedPguuidServiceHandler) CreateUserReturnPartial(context.Context, *connect.Request[v1.CreateUserReturnPartialRequest]) (*connect.Response[v1.CreateUserReturnPartialResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pguuid.v1.PguuidService.CreateUserReturnPartial is not implemented"))
}

func (UnimplementedPguuidServiceHandler) GetProductsByIds(context.Context, *connect.Request[v1.GetProductsByIdsRequest]) (*connect.Response[v1.GetProductsByIdsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pguuid.v1.PguuidService.GetProductsByIds is not implemented"))
}
